import logging
from logging.handlers import RotatingFileHandler

class CustomLogger(logging.Logger):
    """Custom Logger that automatically includes class names in logs."""
    
    def __init__(self, name):
        super().__init__(name)  # Initialize base Logger class

    def get_class_logger(self, cls):
        """Returns a logger instance that automatically logs the class name."""
        return logging.getLogger(f"{cls.__module__}.{cls.__name__}")

# Register the custom logger
logging.setLoggerClass(CustomLogger)

def setup_logger():
    """Configure logging for both file and console."""
    logger = logging.getLogger("app_logger")
    logger.setLevel(logging.DEBUG)

    # Console Handler (INFO+)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)

    # File Handler (DEBUG+, with rotation)
    file_handler = RotatingFileHandler("app.log", maxBytes=1_000_000, backupCount=5)
    file_handler.setLevel(logging.DEBUG)

    # Log Format (Automatically captures module.class name)
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    console_handler.setFormatter(formatter)
    file_handler.setFormatter(formatter)

    # Avoid adding duplicate handlers
    if not logger.handlers:
        logger.addHandler(console_handler)
        logger.addHandler(file_handler)

    return logger

# Initialize and set up the global logger
app_logger = setup_logger()
