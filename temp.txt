import cv2
import numpy as np

def detect_rotation(image_path):
    # Load image, convert to grayscale, and binarize
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, binary = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    # Calculate horizontal and vertical projections
    horizontal_projection = np.sum(binary, axis=1)
    vertical_projection = np.sum(binary, axis=0)

    # Determine if text is horizontal or vertical
    horizontal_var = np.var(horizontal_projection)
    vertical_var = np.var(vertical_projection)

    if horizontal_var > vertical_var:
        # Check for 0° or 180° rotation using baseline detection
        line_spacing = 20  # Adjust based on document
        peaks = np.where(horizontal_projection > np.mean(horizontal_projection) + line_spacing)[0]

        baseline_positions = []
        for peak in peaks:
            line_roi = binary[peak:peak+line_spacing, :]
            line_projection = np.sum(line_roi, axis=1)
            baseline = np.argmax(line_projection) + peak
            baseline_positions.append(baseline)

        avg_baseline = np.mean(baseline_positions)
        line_height = np.max(peaks) - np.min(peaks)
        if avg_baseline > line_height / 2:
            return 0  # Baseline at bottom (0°)
        else:
            return 180  # Baseline at top (180°)
    else:
        # Check aspect ratio for 90° vs 270° (assuming original is portrait)
        height, width = img.shape[:2]
        if width > height:
            return 90
        else:
            return 270

# Example usage
image_path = "scanned_document.jpg"
rotation = detect_rotation(image_path)
print(f"Detected rotation: {rotation}°")
