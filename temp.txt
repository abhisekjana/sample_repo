from langgraph.graph import StateGraph, END
from pydantic import BaseModel
from typing import Literal
import graphviz

# 1. Define State Model
class AgentState(BaseModel):
    status: Literal["PENDING", "SUCCESS", "FAILED"] = "PENDING"
    attempts: int = 0

# 2. Create Nodes
def process_node(state: AgentState) -> dict:
    """Main processing node with conditional logic"""
    if state.attempts < 2:
        return {"status": "PENDING", "attempts": state.attempts + 1}
    return {"status": "SUCCESS"}

def success_node(state: AgentState) -> dict:
    """Final success handler"""
    return {"result": "Operation succeeded!"}

def failure_node(state: AgentState) -> dict:
    """Final failure handler"""
    return {"error": "Max attempts reached"}

# 3. Router Function (Must return strings matching edge keys)
def router(state: AgentState) -> str:
    if state.status == "SUCCESS":
        return "success"
    elif state.status == "PENDING" and state.attempts < 3:
        return "retry"
    return "fail"

# 4. Build Graph with Explicit Structure
builder = StateGraph(AgentState)

# Add nodes FIRST
builder.add_node("process", process_node)
builder.add_node("success", success_node)
builder.add_node("failure", failure_node)

# Set entry point AFTER nodes exist
builder.set_entry_point("process")

# Add conditional edges AFTER nodes are registered
builder.add_conditional_edges(
    "process",
    router,
    {
        "success": "success",  # Key must match router return value
        "retry": "process",
        "fail": "failure"
    }
)

# Add terminal edges explicitly
builder.add_edge("success", END)
builder.add_edge("failure", END)

# 5. Compile and Visualize
agent = builder.compile()

# Generate raw Graphviz DOT code
dot = graphviz.Digraph()
for node in agent.nodes:
    dot.node(node)
for edge in agent.edges:
    dot.edge(edge[0], edge[1])
for source, condition_map in agent.conditional_edges.items():
    for condition, target in condition_map.items():
        dot.edge(source, target, label=condition)

# Save and view
dot.render("conditional_graph", format="png", view=True)
