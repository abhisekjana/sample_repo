import cv2

def split_image_with_overlap(image, overlap_percent=0.1):
    """
    Split an image into 4 overlapping quadrants.
    
    Args:
        image: Input image (numpy array)
        overlap_percent: Percentage of overlap between crops (0-1)
        
    Returns:
        List of 4 cropped images in order:
        [top-left, top-right, bottom-left, bottom-right]
    """
    # Validate overlap percentage
    if overlap_percent < 0 or overlap_percent >= 0.5:
        raise ValueError("Overlap percentage must be between 0 (inclusive) and 0.5 (exclusive)")
    
    # Get image dimensions
    h, w = image.shape[:2]
    
    # Calculate overlap in pixels
    overlap_x = int(w * overlap_percent)
    overlap_y = int(h * overlap_percent)
    
    # Calculate crop dimensions (40% bigger than simple quadrant to allow overlap)
    crop_width = w // 2 + overlap_x
    crop_height = h // 2 + overlap_y
    
    # Define starting coordinates for each crop
    x_coords = [
        0,                # Left
        w - crop_width    # Right
    ]
    
    y_coords = [
        0,                # Top
        h - crop_height   # Bottom
    ]
    
    # Generate crops
    crops = []
    for y in y_coords:
        for x in x_coords:
            crop = image[y:y+crop_height, x:x+crop_width]
            crops.append(crop)
    
    return crops

# Example usage:
if __name__ == "__main__":
    # Load image
    img = cv2.imread("input_image.jpg")
    
    # Split with 15% overlap
    crops = split_image_with_overlap(img, overlap_percent=0.15)
    
    # Save crops
    for i, crop in enumerate(crops):
        cv2.imwrite(f"crop_{i}.jpg", crop)
