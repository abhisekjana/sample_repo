# config.py
"""
Configuration module for the application.

Loads settings from a JSON file and allows overrides via environment variables.
Provides a convenient way to access configuration values.
"""

import json
import os
import logging
import sys
from typing import Any, Optional, Dict

log = logging.getLogger(__name__)

# --- Module Level Globals ---
# Dictionary to hold the loaded configuration settings
settings: Dict[str, Any] = {}

# Default path for the configuration file
_DEFAULT_CONFIG_PATH = "config.json"

# Prefix for environment variables used for overrides (to avoid conflicts)
_ENV_VAR_PREFIX = "APP_"


# --- Core Functions ---

def load_config(config_path: Optional[str] = None) -> None:
    """
    Loads configuration settings into the global 'settings' dictionary.

    Order of precedence (highest first):
    1. Environment variables (if defined and prefixed with _ENV_VAR_PREFIX)
    2. Values from the configuration file.

    Args:
        config_path: Path to the JSON configuration file. If None, uses
                     the path from the APP_CONFIG_PATH environment variable,
                     or falls back to _DEFAULT_CONFIG_PATH.

    Raises:
        FileNotFoundError: If the specified or default config file doesn't exist
                           (and isn't overridden by environment variables completely).
        json.JSONDecodeError: If the config file has invalid JSON.
        Exception: For other potential loading errors.
    """
    global settings
    settings = {} # Reset settings on each load call (useful for testing)

    # Determine the configuration file path
    if config_path is None:
        config_path = os.getenv("APP_CONFIG_PATH", _DEFAULT_CONFIG_PATH)

    log.info(f"Attempting to load configuration from: {config_path}")

    # 1. Load base configuration from JSON file
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            file_settings = json.load(f)
            if isinstance(file_settings, dict):
                settings.update(file_settings)
            else:
                log.error(f"Config file {config_path} does not contain a valid JSON object.")
                raise ValueError("Config file must contain a JSON object.")
        log.info(f"Successfully loaded base configuration from {config_path}")
    except FileNotFoundError:
        log.warning(f"Configuration file not found at {config_path}. "
                    "Proceeding with defaults and environment variables.")
        # We don't necessarily raise here, as env vars might provide all needed config
    except json.JSONDecodeError as e:
        log.error(f"Error decoding JSON from {config_path}: {e}")
        raise # Re-raise critical error
    except Exception as e:
        log.error(f"An unexpected error occurred loading {config_path}: {e}")
        raise # Re-raise other critical errors

    # 2. Override with environment variables
    log.info(f"Checking for environment variable overrides with prefix '{_ENV_VAR_PREFIX}'...")
    _apply_environment_overrides(settings)

    log.debug(f"Final configuration loaded: {settings}") # Careful logging sensitive data


def _apply_environment_overrides(config_dict: Dict[str, Any], prefix: str = _ENV_VAR_PREFIX, current_path: str = "") -> None:
    """
    Recursively applies environment variable overrides to the config dictionary.

    Environment variables are expected in the format:
    PREFIX_SECTION_SUBSECTION_KEY=value
    Example: APP_DATABASE_PORT=5433
    """
    for key, value in config_dict.items():
        env_var_path = f"{current_path}{key}".upper()
        env_var_name = f"{prefix}{env_var_path}"

        env_value = os.getenv(env_var_name)

        if env_value is not None:
            log.info(f"Overriding '{'.join(filter(None, current_path.split('_') + [key]))}' "
                     f"with value from environment variable '{env_var_name}'.")
            # Attempt type conversion based on original value type
            original_type = type(value)
            try:
                if original_type == bool:
                    # Handle boolean conversion carefully (e.g., 'true', '1', 'yes')
                    config_dict[key] = env_value.lower() in ('true', '1', 't', 'yes', 'y')
                elif original_type == int:
                    config_dict[key] = int(env_value)
                elif original_type == float:
                     config_dict[key] = float(env_value)
                else:
                    # Assume string if other types or original type is None
                     config_dict[key] = env_value
            except ValueError:
                log.warning(f"Could not convert environment variable {env_var_name}='{env_value}' "
                            f"to original type {original_type}. Using string value.")
                config_dict[key] = env_value # Keep as string if conversion fails

        # Recurse into nested dictionaries
        if isinstance(value, dict):
            _apply_environment_overrides(value, prefix, f"{env_var_path}_")


def get(key_path: str, default: Any = None) -> Any:
    """
    Retrieves a configuration value using a dot-separated key path.

    Args:
        key_path: The dot-separated path to the setting (e.g., "database.host").
        default: The value to return if the key path is not found.

    Returns:
        The configuration value or the default.
    """
    keys = key_path.split('.')
    value = settings
    try:
        for key in keys:
            if isinstance(value, dict):
                value = value[key]
            else:
                # Trying to access a key on a non-dictionary value
                log.warning(f"Config path '{key_path}' attempted to access key '{key}' on non-dict value.")
                return default
        return value
    except KeyError:
        log.debug(f"Configuration key '{key_path}' not found. Returning default: {default}")
        return default
    except Exception as e:
        log.warning(f"Error accessing configuration key '{key_path}': {e}. Returning default.")
        return default

# --- Optional: Validation ---
# You could add a function here using Pydantic or jsonschema to validate
# the loaded 'settings' against a predefined schema after loading.
# def validate_config():
#    ...


# --- Self-test / Example Usage ---
if __name__ == "__main__":
    # Configure basic logging ONLY when running this file directly for testing
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    print("--- Running Config Module Self-Test ---")

    # Example: Set an environment variable override for testing
    os.environ[f"{_ENV_VAR_PREFIX}DATABASE_PORT"] = "5499"
    os.environ[f"{_ENV_VAR_PREFIX}API_TIMEOUT_SECONDS"] = "30.5" # Test float
    os.environ[f"{_ENV_VAR_PREFIX}FEATURE_FLAGS_NEW_DASHBOARD_ENABLED"] = "True" # Test bool
    os.environ[f"{_ENV_VAR_PREFIX}NEW_SETTING_FROM_ENV"] = "hello_world" # Test adding new setting

    try:
        print("\nLoading configuration...")
        load_config() # Load using default path and env vars

        print("\n--- Accessing Settings ---")
        print(f"Database Host: {get('database.host', 'N/A')}") # From file
        print(f"Database Port: {get('database.port', 'N/A')}") # Overridden by env
        print(f"Database User: {get('database.username')}")    # From file
        print(f"API Timeout:   {get('api.timeout_seconds')}")  # Overridden (float)
        print(f"New Dashboard: {get('feature_flags.new_dashboard_enabled')}") # Overridden (bool)
        print(f"Logging Level: {get('logging.level')}")       # From file
        print(f"Non-existent Key: {get('security.token', 'DEFAULT_TOKEN')}") # Default value
        print(f"New Env Setting: {get('new_setting_from_env')}") # Won't be found unless you modify _apply... to add keys

        print("\n--- Raw Settings Dictionary ---")
        # Be cautious printing raw settings if they contain secrets
        import pprint
        pprint.pprint(settings)

        print("\n--- Testing Non-Existent File ---")
        try:
             load_config("non_existent_config.json")
             print("Config loaded (likely using only env vars now)")
             print(f"Database Port (still from env): {get('database.port', 'N/A')}")
        except Exception as e:
            print(f"Caught expected error for non-existent file (if env vars not enough): {e}")


    except Exception as e:
        print(f"\n--- An error occurred during self-test: {e} ---", file=sys.stderr)
        sys.exit(1)

    finally:
        # Clean up test environment variables
        del os.environ[f"{_ENV_VAR_PREFIX}DATABASE_PORT"]
        del os.environ[f"{_ENV_VAR_PREFIX}API_TIMEOUT_SECONDS"]
        del os.environ[f"{_ENV_VAR_PREFIX}FEATURE_FLAGS_NEW_DASHBOARD_ENABLED"]
        del os.environ[f"{_ENV_VAR_PREFIX}NEW_SETTING_FROM_ENV"]

    print("\n--- Config Module Self-Test Complete ---")
