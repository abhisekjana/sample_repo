import cv2
import numpy as np
import math

def straighten_text_based(image_path, output_path="straightened.jpg"):
    # Read image
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # 1. Preprocess: Thresholding & Edge Detection
    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)
    edges = cv2.Canny(thresh, 50, 150, apertureSize=3)

    # 2. Detect Lines (Hough Transform)
    lines = cv2.HoughLinesP(
        edges, 1, np.pi/180, threshold=100,
        minLineLength=100, maxLineGap=10
    )

    # 3. Calculate Angles of Detected Lines
    angles = []
    for line in lines:
        x1, y1, x2, y2 = line[0]
        angle = math.degrees(math.atan2(y2 - y1, x2 - x1))
        # Focus on near-horizontal lines (text baselines)
        if abs(angle) < 45:  # Ignore vertical lines
            angles.append(angle)

    # 4. Compute Median Skew Angle
    median_angle = np.median(angles)
    print(f"Detected Skew Angle: {median_angle:.2f} degrees")

    # 5. Rotate Image to Correct Skew
    (h, w) = img.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, median_angle, 1.0)
    rotated = cv2.warpAffine(
        img, M, (w, h),
        flags=cv2.INTER_CUBIC,
        borderMode=cv2.BORDER_REPLICATE
    )

    # 6. Crop Black Borders (Optional)
    gray_rotated = cv2.cvtColor(rotated, cv2.COLOR_BGR2GRAY)
    _, thresh_rot = cv2.threshold(gray_rotated, 1, 255, cv2.THRESH_BINARY)
    coords = cv2.findNonZero(thresh_rot)
    x, y, w, h = cv2.boundingRect(coords)
    cropped = rotated[y:y+h, x:x+w]

    cv2.imwrite(output_path, cropped)
    return cropped

# Usage
straightened = straighten_text_based("skewed_doc.jpg")
