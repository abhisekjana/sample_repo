import cv2
import numpy as np

def crop_scanned_document(image_path, debug=False):
    # Read image
    img = cv2.imread(image_path)
    if img is None:
        raise ValueError("Image not found or invalid path")

    # Preprocessing pipeline
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    denoised = cv2.medianBlur(gray, ksize=3)  # Remove salt-and-pepper noise
    
    # Adaptive thresholding for document binarization
    thresh = cv2.adaptiveThreshold(
        denoised, 255,
        cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
        cv2.THRESH_BINARY_INV, 21, 10
    )

    # Morphological cleaning
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
    cleaned = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=1)  # Remove small spots
    cleaned = cv2.morphologyEx(cleaned, cv2.MORPH_CLOSE, kernel, iterations=2)  # Merge text regions

    # Remove large artifacts using contour area filtering
    contours, _ = cv2.findContours(cleaned, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    mask = np.ones_like(cleaned) * 255
    min_area = 100  # Minimum area for content retention (adjust as needed)
    
    for cnt in contours:
        if cv2.contourArea(cnt) < min_area:
            cv2.drawContours(mask, [cnt], -1, 0, -1)

    final_cleaned = cv2.bitwise_and(cleaned, mask)

    # Find document content bounding box
    coords = cv2.findNonZero(final_cleaned)
    if coords is None:
        return img  # Return original if no content found
    
    x, y, w, h = cv2.boundingRect(coords)
    cropped = img[y:y+h, x:x+w]

    if debug:
        cv2.imshow("Debug: Thresholded", thresh)
        cv2.imshow("Debug: Cleaned", final_cleaned)
        cv2.waitKey(0)

    return cropped

# Usage
cropped_doc = crop_scanned_document("scanned_doc.jpg", debug=True)
cv2.imwrite("final_cropped.jpg", cropped_doc)
